(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{65:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"深度优先搜索"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索","aria-hidden":"true"}},[t._v("#")]),t._v(" 深度优先搜索")]),a("p",[t._v("深度优先搜索("),a("strong",[t._v("Depth-First Search")]),t._v(")，是图论中的经典算法。其利用深度优先搜索算法可以产生目标图的相应拓扑排序表，利用拓扑排序表可以方便的解决很多相关的图论问题，如最大路径问题等等。")]),a("p",[t._v("图的深度优先遍历类似于树的前序遍历。采用的搜索方法的特点是尽可能先对纵深方向进行搜索。这种搜索方法称为深度优先搜索("),a("strong",[t._v("Depth-First Search")]),t._v(")。相应地，用此方法遍历图就很自然地称之为图的深度优先遍历。")]),a("p",[t._v("完成深度优先搜索算法,我们要借助图和递归来实现")]),a("p",[t._v("首先我们实现一个"),a("code",[t._v("Graph")])]),a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Edge")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Equatable")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("init")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbor "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" neighbor\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Edge")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Edge")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbor "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbor\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Equatable")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" neighbors"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token builtin"}},[t._v("Edge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" label"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("String")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" visited"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("distance")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Int")]),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("init")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" label"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("String")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        neighbors "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" label\n        visited "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbors "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbors "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Graph")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Equatable")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nodes"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("init")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("self")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodes "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" label"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("String")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" node "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("label"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        nodes"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("append")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" source"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        source"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbors"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("append")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("Edge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Graph")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Graph")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" lhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodes "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" rhs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nodes\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])]),a("p",[t._v("我们给Graph插入一些测试数据,让其形成一个这样的结构")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\t\t      a\n\t\t     / \\\n\t\t  b   c\n\t\t / \\ / \\ \n\t        d  e-f-g\n\t          / \n\t         h\n\n")])]),a("p",[t._v("当我们用深度优先搜索,它将沿着a-b-d-e-h-f-g-c 这样一个路线进行搜索")]),a("p",[t._v("要实现这个算法,我们可以用基本的递归方式来完成")]),a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("depthFirstSearch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Graph")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" source"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Node")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token builtin"}},[t._v("String")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nodesExplored "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("source"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("label"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    source"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("visited "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" edge "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" source"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbors "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("edge"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("visited "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            nodesExplored "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("depthFirstSearch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" source"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" edge"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" nodesExplored\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),a("p",[t._v("我们测试一下")]),a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" graph "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Graph")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeA "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"a"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeB "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"b"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeC "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"c"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeD "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"d"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"e"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeF "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"f"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeG "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"g"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodeH "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"h"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeA"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeB"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeA"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeC"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeB"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeD"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeB"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeC"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeF"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeC"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeG"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeH"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeF"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ngraph"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("addEdge")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodeF"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" neighbor"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeG"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nodesExplored "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("depthFirstSearch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("graph"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" source"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nodeA"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("print")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nodesExplored"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),a("p",[t._v("最终的结果为")]),a("blockquote",[a("p",[t._v('["a", "b", "d", "e", "h", "f", "g", "c"]')])])])}],!1,null,null,null);s.default=o.exports}}]);