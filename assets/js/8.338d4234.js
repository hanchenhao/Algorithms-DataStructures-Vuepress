(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{55:function(t,a,s){"use strict";s.r(a);var n=s(0),_=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"插入排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#插入排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 插入排序")]),s("p",[t._v("插入排序的工作方式如下：")]),s("ul",[s("li",[t._v("首先，将这些待排序的数字放在一个数组中，成为未排序的原始数组。")]),s("li",[t._v("从其中取出一个数字，具体取哪个无所谓。为简单起见，每次都直接取出第一个元素。")]),s("li",[t._v("将这个数字插入到一个新的已排序数组中。")]),s("li",[t._v("然后再次从未排序数组中取出一个数字，将其插入到已排序数组中。它要么插在第一个元素的前面，要么插在后面，来保证这两个数字是有序的。")]),s("li",[t._v("再一次从未排序数组中取出一个元素，安插在新数组的合适位置，以求新数组依然有序。")]),s("li",[t._v("一直这样做下去，直到未排序数组中没有数字了为止。这样就可以达到排序的目的了。")])]),s("p",[t._v("这就是算法叫“插入”排序的原因，因为排序过程中不断地从未排序数组中取出元素插入到已排序的目标数组。")]),s("h2",{attrs:{id:"举例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#举例","aria-hidden":"true"}},[t._v("#")]),t._v(" 举例")]),s("p",[t._v("例如，待排序的数组为 "),s("code",[t._v("[ 8, 3, 5, 4, 6 ]")]),t._v("。")]),s("p",[t._v("取出第一个数字 "),s("code",[t._v("8")]),t._v("，将它插入到已排序数组中。已排序数组目前还是空的，所以这个过程非常简单。已排序数组现在为 "),s("code",[t._v("[ 8 ]")]),t._v("，未排序数组为 "),s("code",[t._v("[ 3, 5, 4, 6 ]")]),t._v("。")]),s("p",[t._v("取出下一个数字 "),s("code",[t._v("3")]),t._v("，将其插入到已排序数组。他应该在 "),s("code",[t._v("8")]),t._v(" 的前面，所以已排序数组现在为 "),s("code",[t._v("[ 3, 8 ]")]),t._v("，未排序数组缩减为 "),s("code",[t._v("[ 5, 4, 6 ]")])]),s("p",[t._v("取出下一个数字 "),s("code",[t._v("5")]),t._v("，将其插入到已排序数组中。它应该在 "),s("code",[t._v("3")]),t._v(" 和 "),s("code",[t._v("8")]),t._v(" 之间。所以，现在已排序数组为 "),s("code",[t._v("[ 3, 5, 8]")]),t._v(",未排序数组为 "),s("code",[t._v("[ 4, 6 ]")]),t._v("。")]),s("p",[t._v("重复以上过程，直到未排序数组为空为止。")]),s("h2",{attrs:{id:"原地排序"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原地排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 原地排序")]),s("p",[t._v("根据上面的解释，排序过程中似乎使用了两个数组，一个用于存放未排序的的元素，另一个存放已排序的元素。")]),s("p",[t._v("但实际上插入排序可以“原地”进行，无需再创建另一个数组。只需要标记好哪部分是未排序的，哪部分是已排序的即可。")]),s("p",[t._v("初始数组为 "),s("code",[t._v("[ 8, 3, 5, 4, 6 ]")]),t._v("。我们使用 "),s("code",[t._v("|")]),t._v(" 符号来分隔已排序和未排序部分：")]),s("pre",[s("code",[t._v("[| 8, 3, 5, 4, 6 ]\n")])]),s("p",[t._v("上图显示已排序部分为空，未排序部分的第一个数字为 "),s("code",[t._v("8")]),t._v("。")]),s("p",[t._v("处理完第一个数字之后，数组如下所示：")]),s("pre",[s("code",[t._v("[ 8 | 3, 5, 4, 6 ]\n")])]),s("p",[t._v("目前，已排序的部分为 "),s("code",[t._v("[ 8 ]")]),t._v("，未排序的部分为 "),s("code",[t._v("[ 3, 5, 4, 6 ]")]),t._v("。分隔符 "),s("code",[t._v("|")]),t._v(" 向右位移了一个单位。")]),s("p",[t._v("下面列出了排序过程中数组内容的变化：")]),s("pre",[s("code",[t._v("[| 8, 3, 5, 4, 6 ]\n[ 8 | 3, 5, 4, 6 ]\n[ 3, 8 | 5, 4, 6 ]\n[ 3, 5, 8 | 4, 6 ]\n[ 3, 4, 5, 8 | 6 ]\n[ 3, 4, 5, 6, 8 |]\n")])]),s("p",[t._v("每一步分隔符 "),s("code",[t._v("|")]),t._v(" 都向右位移一个单位。可以观察到，数组开头到分隔符之间的部分总是已排序的。未排序部分每减少一个元素，已排序部分就增加一个，直到未排序元素为空为止。")]),s("h2",{attrs:{id:"如何插入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何插入","aria-hidden":"true"}},[t._v("#")]),t._v(" 如何插入")]),s("p",[t._v("每个周期开始，取出未排序数组的头部元素，将其插入到已排序数组中。这时候，必须要保证元素被插入到了正确的位置。怎么做呢？")]),s("p",[t._v("现在假设已经完成了前面几个元素的排序，数组看起来像下面这样：")]),s("pre",[s("code",[t._v("[ 3, 5, 8 | 4, 6 ]\n")])]),s("p",[t._v("下一个待排序的数字是 "),s("code",[t._v("4")]),t._v("。我们要做的就是将其插入到已排序数组 "),s("code",[t._v("[ 3, 5, 8 ]")]),t._v(" 的某个位置。")]),s("p",[t._v("下面提供了一个实现思路：跟前面的元素 "),s("code",[t._v("8")]),t._v(" 进行比较。")]),s("pre",[s("code",[t._v("[ 3, 5, 8, 4 | 6 ]\n        ^\n")])]),s("p",[t._v("它比 "),s("code",[t._v("4")]),t._v(" 大吗？是的，所以 "),s("code",[t._v("4")]),t._v(" 应该放到 "),s("code",[t._v("8")]),t._v(" 的前面去。我们将两个数字交换位置来达到目的：")]),s("pre",[s("code",[t._v("[ 3, 5, 4, 8 | 6 ]\n        <--\x3e\n       已交换\n")])]),s("p",[t._v("至此还没有结束。交换之后，新的排在前面的元素 "),s("code",[t._v("5")]),t._v(" 也比 "),s("code",[t._v("4")]),t._v(" 大。我们如法炮制，也将这两个数字交换位置：")]),s("pre",[s("code",[t._v("[ 3, 4, 5, 8 | 6 ]\n     <--\x3e\n    已交换\n")])]),s("p",[t._v("继续，再次检查排在前面的新元素 "),s("code",[t._v("3")]),t._v("，它比 "),s("code",[t._v("4")]),t._v(" 大吗？不，它必 "),s("code",[t._v("4")]),t._v(" 小，这就意味着 "),s("code",[t._v("4")]),t._v(" 已经在正确的位置上了。已排序的数组也再次变得有序了。")]),s("p",[t._v("这就是插入排序算法的内循环的文字描述了，具体的代码在下一节给出。通过交换数字的方式，我们将待排序的元素移动到了已排序数组的正确位置上。")]),s("pre",{pre:!0,attrs:{class:"language-swift"}},[s("code",[t._v("\n"),s("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" insertionSort"),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Comparable")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("T"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("_")]),t._v(" compare"),s("span",{attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("T"),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token builtin"}},[t._v("Bool")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("T"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" array\n    \n    "),s("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" i "),s("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" i\n        "),s("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" n "),s("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{attrs:{class:"token function"}},[t._v("compare")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),s("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            a"),s("span",{attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{attrs:{class:"token function"}},[t._v("swapAt")]),s("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),s("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" n"),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token number"}},[t._v("1")]),s("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            n "),s("span",{attrs:{class:"token operator"}},[t._v("-")]),s("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n        "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a\n"),s("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])])}],!1,null,null,null);a.default=_.exports}}]);