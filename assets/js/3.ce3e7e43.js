(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{51:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"快速排序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快速排序","aria-hidden":"true"}},[t._v("#")]),t._v(" 快速排序")]),a("p",[t._v("快速排序是一种历史上非常流行的算法,它在1959年,递归概念都很模糊的时候,被"),a("strong",[t._v("Tony Hoare")]),t._v("创造")]),a("p",[t._v("下面我们用swift来写一个很容易理解的版本:")]),a("pre",{pre:!0,attrs:{class:"language-swift"}},[a("code",[t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("func")]),t._v(" quickSort"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token builtin"}},[t._v("Comparable")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("T"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("guard")]),t._v(" array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" array\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ave "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Int")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token builtin"}},[t._v("count")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ave"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" less "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("filter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" c"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" eq "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("filter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" c"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" more "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("filter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("$"),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" c"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("quickSort")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" less"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" eq "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("quickSort")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("array"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" more"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    \n    \n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),a("p",[t._v("下面我们来看看快速排序的工作原理,它其实是在一个数组中找到一个基准值,在理想状态下,通过这个值我们将数组分成三部分,其中分别是比基准值大的部分,比基准值小的部分,以及和基准值相等的部分,这样的话,我们只需要递归这几部分就可以得到最终的答案")]),a("p",[t._v("比如当前我们有一个数组")]),a("pre",[a("code",[t._v("[ 10, 0, 3, 9, 2, 14, 8, 27, 1, 5, 8, -1, 26 ]\n")])]),a("p",[t._v("首先我们会选择数组中间的元素当基准值,这个值是"),a("code",[t._v("8")]),t._v(",我们以8为中心分别排列")]),a("pre",[a("code",[t._v("less:    [ 0, 3, 2, 1, 5, -1 ]\nequal:   [ 8, 8 ]\ngreater: [ 10, 9, 14, 27, 26 ]\n")])]),a("p",[t._v("通过上述排列,我们得到了三个数组,我们再用相同的方式来排列当前这个"),a("code",[t._v("less")]),t._v("数组")]),a("p",[a("code",[t._v("less")]),t._v("数组现在是这个样子的")]),a("pre",[a("code",[t._v("[ 0, 3, 2, 1, 5, -1 ]\n")])]),a("p",[t._v("我们找到他基准值继续拆分")]),a("pre",[a("code",[t._v("less:    [ 0, -1 ]\nequal:   [ 1 ]\ngreater: [ 3, 2, 5 ]\n")])]),a("p",[t._v("以此类推,我们继续拆分"),a("code",[t._v("less")]),t._v("会变成")]),a("pre",[a("code",[t._v("less:    [ ]\nequal:   [ -1 ]\ngreater: [ 0 ]\n")])]),a("p",[t._v("用同样的方式,我们拆分"),a("code",[t._v("greater")]),t._v("最终会得到下面这个结果")]),a("pre",[a("code",[t._v("less:    [ ]\nequal:   [ 2 ]\ngreater: [ 3, 5 ]\n\nless:    [ ]\nequal:   [ 2 ]\ngreater: [\n\tless:    [ 3 ]\n\tequal:   [ 5 ]\n\tgreater: [ ]\n]\n")])]),a("p",[t._v("我们分别将这些数组组装成一个完整的数组之后就成为了一个排好序的数组了")]),a("pre",[a("code",[t._v("[ -1, 0, 1, 2, 3, 5, 8, 8, 9, 10, 14, 26, 27 ]\n")])])])}],!1,null,null,null);s.default=e.exports}}]);